#ifndef HIT_TEXTURE_INCLUDED
#define HIT_TEXTURE_INCLUDED

float3 mCenter : CONTROLOBJECT<string name = "GatagataExController.pmx"; string item = "Center";>;
float3 mSize   : CONTROLOBJECT<string name = "GatagataExController.pmx"; string item = "Size";>;
float3 mYmin   : CONTROLOBJECT<string name = "GatagataExController.pmx"; string item = "Ymin";>;
float3 mYmax   : CONTROLOBJECT<string name = "GatagataExController.pmx"; string item = "Ymax";>;

static const float PlaneSize = abs(mSize.x) * 2;
static const int HitTextureSize = 512;
static const float2 HitTextureOffset = float2(0.5, 0.5) / HitTextureSize;

// ビュー行列を返す。
// eye: カメラの座標
// at: カメラの注目点の座標
// up: カメラの上方向を表すベクトル
float4x4 MatrixLookAtLH(float3 eye, float3 at, float3 up) {
    float3 zaxis = normalize(at - eye);
    float3 xaxis = normalize(cross(up, zaxis));
    float3 yaxis = cross(zaxis, xaxis);
    return float4x4(
                 xaxis.x,          yaxis.x,          zaxis.x,    0,
                 xaxis.y,          yaxis.y,          zaxis.y,    0,
                 xaxis.z,          yaxis.z,          zaxis.z,    0,
        -dot(xaxis, eye), -dot(yaxis, eye), -dot(zaxis, eye),    1
	);
}

// 正射影行列を返す。
// w: ビューボリュームの幅
// h: ビューボリュームの高さ
// zn: 近クリップ平面の z 値
// zf: 遠クリップ平面の z 値
float4x4 MatrixOrthoLH(float w, float h, float zn, float zf) {
    return float4x4 (
        2/w,   0,          0,    0,
          0, 2/h,          0,    0,
          0,   0,  1/(zf-zn),    0,
          0,   0, zn/(zn-zf),    1
	);
}

static const float4x4 HitTestViewMatrix = MatrixLookAtLH(
	mCenter, mCenter + float3(0, 1, 0), float3(0, 0, 1)
);
static const float4x4 HitTestProjMatrix = MatrixOrthoLH(
	PlaneSize, PlaneSize, min(mYmin.y, mYmax.y), max(mYmin.y, mYmax.y)
);
static const float4x4 HitTestViewProjMatrix = mul(HitTestViewMatrix, HitTestProjMatrix);

inline float4 WorldPosToHitTexturePos(float4 worldPos) {
    return mul(worldPos, HitTestViewProjMatrix);
}

#endif
